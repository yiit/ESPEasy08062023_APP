#include "_Plugin_Helper.h"
#include "src/Helpers/Misc.h"
#include "src/DataTypes/SensorVType.h"

#ifdef USES_P090


#include "src/Commands/InternalCommands.h"
#include "src/ESPEasyCore/ESPEasyNetwork.h"
#include "src/ESPEasyCore/Controller.h"

#include "src/WebServer/ESPEasy_WebServer.h"
#include "src/WebServer/HTML_wrappers.h"
#include "src/WebServer/Markup.h"
#include "src/WebServer/Markup_Buttons.h"
#include "src/WebServer/Markup_Forms.h"
#include "src/WebServer/Lisans.h"
#include "src/WebServer/ToolsPage.h"
#include "src/WebServer/Rules.h"
#include "src/WebServer/LoadFromFS.h"

#include "src/Globals/CPlugins.h"
#include "src/Globals/Device.h"
#include "src/Globals/ExtraTaskSettings.h"
#include "src/Globals/Nodes.h"
#include "src/Globals/Plugins.h"
#include "src/Globals/Protocol.h"
#include "src/Globals/Settings.h"

#include "src/Helpers/ESPEasy_Storage.h"
#include "src/Helpers/Memory.h"
#include "src/Helpers/StringConverter.h"
#include "src/Helpers/StringParser.h"
#include "src/Helpers/Networking.h"

#include "ESPEasy_common.h"
#include "ESPEasy-Globals.h"

//#######################################################################################################
//##################################### Plugin 090: PANO ##############################################
//#######################################################################################################
#define PLUGIN_090
#define PLUGIN_ID_090 90
#define PLUGIN_NAME_090 "Proje - PANO"
#define PLUGIN_VALUENAME1_090 "NET"
#define PLUGIN_VALUENAME2_090 "KATSAYI1"
#define PLUGIN_VALUENAME3_090 "KATSAYI2"

#define PANO_Indikator ExtraTaskSettings.TaskDevicePluginConfigLong[1]
#define PANO_Mod ExtraTaskSettings.TaskDevicePluginConfigLong[6]

#ifdef ESP8266
#include <ESP8266WiFi.h>
#endif
#ifdef ESP32
#include <WiFi.h>
#include <ETH.h>
#endif

//#define SX1509_USE

#include "ModbusTCPSlave.h"
ModbusTCPSlave Mb_90;

#include <Arduino.h>
#include <U8g2lib.h>

#include <SPI.h>

U8G2_ST7920_128X64_F_SW_SPI u8g2(U8G2_R0, /* clock=*/12, /* data=*/14, /* CS=*/15, /* reset=*/U8X8_PIN_NONE);
//U8G2_ST7920_128X64_F_SW_SPI u8g2(U8G2_R0, /* clock=*/12, /* data=*/14, /* CS=*/13, /* reset=*/U8X8_PIN_NONE);
//U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);


#include <Wire.h>
#ifdef SX1509_USE
#include <SparkFunSX1509.h>  //Click here for the library: http://librarymanager/All#SparkFun_SX1509

// SX1509 I2C address (set by ADDR1 and ADDR0 (00 by default):
const byte SX1509_ADDRESS = 0x3E;  // SX1509 I2C address
SX1509 io;

const byte SX1509_BUTTON_PIN0 = 0;  // Active-low button
const byte SX1509_BUTTON_PIN1 = 1;  // Floating or jumpered input
const byte SX1509_BUTTON_PIN2 = 2;  // Active-low button
const byte SX1509_BUTTON_PIN3 = 3;  // Floating or jumpered input
const byte SX1509_BUTTON_PIN4 = 4;  // Active-low button
#endif

float formul1_katsayi;
float formul2_katsayi;
int hizli_buton = 0;
boolean load_katsayi = true;
boolean Button_Aktif = false;
boolean button_bas_aktif = true;

float formul1_float;
float formul2_float;
boolean formul1_bool = false;
boolean formul2_bool = false;

//------------------------------------------------------------------------------
// File generated by LCD Assistant
// http://en.radzio.dxp.pl/bitmap_converter/
//------------------------------------------------------------------------------

const unsigned char MEGA_LOGO[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf8, 0xf0, 0x0f, 0xf0, 0x0f, 0x00, 0xe0, 0x7f, 0x00, 0x00, 0xfe, 0xe3, 0x03, 0xc0, 0xff, 0x03, 0xf8, 0xfc, 0x3f, 0xfc, 0x3f, 0x00, 0xf8, 0xff,
  0x01, 0x80, 0xff, 0xef, 0x03, 0xf0, 0xff, 0x0f, 0xf8, 0xfe, 0x7f, 0xfe, 0x7f, 0x00, 0xfe, 0xff, 0x07, 0xc0, 0xff, 0xff, 0x03, 0xfc, 0xff, 0x1f,
  0xf8, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0x0f, 0xe0, 0xff, 0xff, 0x03, 0xfe, 0xff, 0x3f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
  0x0f, 0xf0, 0xff, 0xff, 0x03, 0xfe, 0xff, 0x7f, 0xf8, 0x0f, 0xfe, 0x0f, 0xfe, 0x80, 0x7f, 0xe0, 0x1f, 0xf0, 0x07, 0xfe, 0x03, 0x7f, 0x00, 0x7f,
  0xf8, 0x07, 0xfc, 0x07, 0xfc, 0xc1, 0x1f, 0x80, 0x3f, 0xf8, 0x03, 0xf8, 0x03, 0x3f, 0x00, 0x7e, 0xf8, 0x03, 0xf8, 0x03, 0xf8, 0xc1, 0x0f, 0x00,
  0x3f, 0xf8, 0x01, 0xf8, 0x03, 0x3f, 0x00, 0x7e, 0xf8, 0x03, 0xf8, 0x01, 0xf8, 0xc1, 0x0f, 0x00, 0x3f, 0xfc, 0x01, 0xf0, 0x03, 0x1f, 0x00, 0x7e,
  0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0x07, 0x00, 0x3e, 0xfc, 0x00, 0xf0, 0x03, 0x18, 0x00, 0x7c, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0x07, 0x00,
  0x7e, 0xfc, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x7f, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0xff, 0xff, 0x7f, 0xfc, 0x00, 0xe0, 0x03, 0x00, 0xf8, 0x7f,
  0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0xff, 0xff, 0x7f, 0xfc, 0x00, 0xe0, 0x03, 0xe0, 0xff, 0x7f, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0xff, 0xff,
  0x7f, 0xfc, 0x00, 0xe0, 0x03, 0xf8, 0xff, 0x7f, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0xff, 0xff, 0x7f, 0xfc, 0x00, 0xe0, 0x03, 0xfe, 0xff, 0x7f,
  0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0xff, 0xff, 0x7f, 0xfc, 0x00, 0xe0, 0x03, 0xff, 0xff, 0x7c, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0x07, 0x00,
  0x00, 0xfc, 0x00, 0xe0, 0x03, 0xff, 0x03, 0x7c, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0x07, 0x00, 0x00, 0xfc, 0x00, 0xe0, 0x83, 0x7f, 0x00, 0x7e,
  0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0x07, 0x00, 0x00, 0xfc, 0x00, 0xf0, 0x83, 0x1f, 0x00, 0x7e, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xe1, 0x0f, 0x00,
  0x7e, 0xfc, 0x01, 0xf0, 0x83, 0x1f, 0x00, 0x7e, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xc1, 0x0f, 0x00, 0x7f, 0xf8, 0x01, 0xf8, 0x83, 0x1f, 0x00, 0x7f,
  0xf8, 0x01, 0xf8, 0x01, 0xf8, 0xc1, 0x1f, 0x80, 0x3f, 0xf8, 0x03, 0xf8, 0x83, 0x1f, 0x00, 0x7f, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x81, 0x3f, 0xc0,
  0x3f, 0xf0, 0x07, 0xfe, 0x83, 0x3f, 0x80, 0x7f, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x81, 0xff, 0xe0, 0x1f, 0xf0, 0xff, 0xff, 0x83, 0x7f, 0xe0, 0x7f,
  0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xfe, 0xff,
  0x0f, 0xc0, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xfc, 0xff, 0x07, 0x80, 0xff, 0xef, 0x03, 0xfe, 0xff, 0xfd,
  0xf8, 0x01, 0xf8, 0x01, 0xf8, 0x01, 0xf0, 0xff, 0x01, 0x00, 0xfc, 0xe3, 0x03, 0xf8, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1f,
  0x00, 0x00, 0x00, 0xe0, 0x03, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xf8, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 0xf8, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xf8, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf8, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



boolean Plugin_090(byte function, struct EventStruct* event, String& string) {
  boolean success = false;

  switch (function) {

    case PLUGIN_DEVICE_ADD:
      {
        Device[++deviceCount].Number = PLUGIN_ID_090;
        Device[deviceCount].Type = DEVICE_TYPE_DUMMY;
        Device[deviceCount].FormulaOption = true;
        Device[deviceCount].ValueCount = 3;
        Device[deviceCount].SendDataOption = false;
        Device[deviceCount].TimerOption = false;
        Device[deviceCount].GlobalSyncOption = false;
        break;
      }

    case PLUGIN_GET_DEVICENAME:
      {
        string = F(PLUGIN_NAME_090);
        break;
      }

    case PLUGIN_GET_DEVICEVALUENAMES:
      {
        strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[0], PSTR(PLUGIN_VALUENAME1_090));
        strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[1], PSTR(PLUGIN_VALUENAME2_090));
        strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[2], PSTR(PLUGIN_VALUENAME3_090));
        break;
      }

    case PLUGIN_WEBFORM_LOAD:
      {

        //addFormSubHeader(F("PANO AYARLARI"));
        byte choice1 = PANO_Mod;
        String options1[6];
        options1[0] = F("SÜREKLi VERi (TEK SATIRLI VERi)");
        options1[1] = F("TERAZiDEN OTOMATiK (TEK SATIRLI VERi)");
        options1[2] = F("DENGELi OTOMATiK (TEK SATIRLI VERi)");
        options1[3] = F("TERAZiDEN TUŞ iLE (ÇOK SATIRLI VERi)");
        options1[4] = F("YAZICIDAN TUŞ iLE KONTROL(ÇOK SATIRLI VERi)");
        options1[5] = F("KUMANDA");
        int optionValues1[6];
        optionValues1[0] = 0;
        optionValues1[1] = 1;
        optionValues1[2] = 2;
        optionValues1[3] = 3;
        optionValues1[4] = 4;
        optionValues1[5] = 5;
        addFormSelector(F("Mod"), F("plugin_090_mod"), 6, options1, optionValues1, choice1);

        addFormSubHeader(F("İndikatör Ayarları"));
        indikator_secimi(event, PANO_Indikator, F("plugin_090_indikator"));
        addFormCheckBox(F("İndikatör Data Düzenleme"), F("duzenle"), PCONFIG(4));
        addFormNote(F("<font color='red'>Baslangıç-Bitiş Datasının Değişimine İzin Verir.</font>"));

        success = true;
        break;
      }

    case PLUGIN_WEBFORM_SAVE:
      {
        PANO_Indikator = getFormItemInt(F("plugin_090_indikator"));

        PANO_Mod = getFormItemInt(F("plugin_090_mod"));
        ExtraTaskSettings.TaskDeviceIsaretByte = getFormItemInt(F("isaret_byte"));
        ExtraTaskSettings.TaskDeviceSonByte = getFormItemInt(F("son_byte"));

        PCONFIG(4) = isFormItemChecked(F("duzenle"));
        indikator_secimi_kaydet(event, PANO_Indikator, PCONFIG(4));

        success = true;
        break;
      }

    case PLUGIN_INIT:
      {
#ifdef SX1509_USE
        io.begin(SX1509_ADDRESS);
        io.pinMode(SX1509_BUTTON_PIN0, INPUT_PULLUP);
        io.pinMode(SX1509_BUTTON_PIN1, INPUT_PULLUP);
        io.pinMode(SX1509_BUTTON_PIN2, INPUT_PULLUP);
        io.pinMode(SX1509_BUTTON_PIN3, INPUT_PULLUP);
        io.pinMode(SX1509_BUTTON_PIN4, INPUT_PULLUP);
#else
        pcf8574.pinMode(P0, INPUT);
        pcf8574.pinMode(P1, INPUT);
        pcf8574.pinMode(P2, INPUT);
        pcf8574.pinMode(P3, INPUT);
        pcf8574.pinMode(P4, INPUT);
        pcf8574.pinMode(P5, OUTPUT);
        pcf8574.begin();
        pcf8574.digitalWrite(P5, LOW);
#endif
        u8g2.begin();
        u8g2.clearBuffer();
        u8g2.drawXBMP(0, 5, 128, 58, MEGA_LOGO);
        u8g2.sendBuffer();
        delay(2000);
        u8g2.clearBuffer();
        u8g2.setFont(u8g2_font_ncenB12_tr);
        u8g2.drawStr(10, 40, Settings.Name);  // write something to the internal memory
        u8g2.sendBuffer();
        delay(2000);
        //u8g2.setFont(u8g2_font_t0_18_tf);
        Mb_90.begin();
        Settings.WebAPP = 90;
        success = true;
        break;
      }

    case PLUGIN_ONCE_A_SECOND:
      {
        Mb_90.Run();
        if (load_katsayi) {
          XML_FORMUL1_KATSAYI_S = String(ExtraTaskSettings.TaskDeviceFormula[1]);
          XML_FORMUL2_KATSAYI_S = String(ExtraTaskSettings.TaskDeviceFormula[2]);
          formul1_katsayi = String(ExtraTaskSettings.TaskDeviceFormula[1]).toFloat();
          formul2_katsayi = String(ExtraTaskSettings.TaskDeviceFormula[2]).toFloat();
          Mb_90.MBHoldingRegister[6] = f_2uint_int1(formul1_katsayi);
          Mb_90.MBHoldingRegister[7] = f_2uint_int2(formul1_katsayi);
          Mb_90.MBHoldingRegister[8] = f_2uint_int1(formul2_katsayi);
          Mb_90.MBHoldingRegister[9] = f_2uint_int2(formul2_katsayi);
          if ((formul1_katsayi > 5.000) || (formul1_katsayi < 1.000)) {
            XML_FORMUL1_KATSAYI_S = "1.000";
            dtostrf(XML_FORMUL1_KATSAYI_S.toFloat(), 6, 3, XML_FORMUL1_KATSAYI_C);
            strcpy_P(ExtraTaskSettings.TaskDeviceFormula[1], PSTR(XML_FORMUL1_KATSAYI_C));
            Mb_90.MBHoldingRegister[6] = f_2uint_int1(XML_FORMUL1_KATSAYI_S.toFloat());
            Mb_90.MBHoldingRegister[7] = f_2uint_int2(XML_FORMUL1_KATSAYI_S.toFloat());
            SaveTaskSettings(event->TaskIndex);
          }
          if ((formul2_katsayi > 5.000) || (formul2_katsayi < 1.000)) {
            XML_FORMUL2_KATSAYI_S = "1.000";
            dtostrf(XML_FORMUL2_KATSAYI_S.toFloat(), 6, 3, XML_FORMUL2_KATSAYI_C);
            strcpy_P(ExtraTaskSettings.TaskDeviceFormula[2], PSTR(XML_FORMUL2_KATSAYI_C));
            Mb_90.MBHoldingRegister[8] = f_2uint_int1(XML_FORMUL2_KATSAYI_S.toFloat());
            Mb_90.MBHoldingRegister[9] = f_2uint_int2(XML_FORMUL2_KATSAYI_S.toFloat());
            SaveTaskSettings(event->TaskIndex);
          }
          formul1_float = f_2uint_float(Mb_90.MBHoldingRegister[6], Mb_90.MBHoldingRegister[7]);
          formul2_float = f_2uint_float(Mb_90.MBHoldingRegister[8], Mb_90.MBHoldingRegister[9]);
          load_katsayi = false;
        }

        if (f_2uint_float(Mb_90.MBHoldingRegister[6], Mb_90.MBHoldingRegister[7]) != formul1_float) {
          if ((f_2uint_float(Mb_90.MBHoldingRegister[6], Mb_90.MBHoldingRegister[7]) < 5.0000) && (f_2uint_float(Mb_90.MBHoldingRegister[6], Mb_90.MBHoldingRegister[7]) > 0)) {
            formul1_bool = true;
            button_basildi = millis() + 1500;
            button_bas_aktif = true;
          } else {
            Mb_90.MBHoldingRegister[6] = f_2uint_int1(XML_FORMUL1_KATSAYI_S.toFloat());
            Mb_90.MBHoldingRegister[7] = f_2uint_int2(XML_FORMUL1_KATSAYI_S.toFloat());
          }
        }
        if (f_2uint_float(Mb_90.MBHoldingRegister[8], Mb_90.MBHoldingRegister[9]) != formul2_float) {
          if ((f_2uint_float(Mb_90.MBHoldingRegister[8], Mb_90.MBHoldingRegister[9]) < 5.0000) && (f_2uint_float(Mb_90.MBHoldingRegister[8], Mb_90.MBHoldingRegister[9]) > 0)) {
            formul2_bool = true;
            button_basildi = millis() + 1500;
            button_bas_aktif = true;
          } else {
            Mb_90.MBHoldingRegister[8] = f_2uint_int1(XML_FORMUL2_KATSAYI_S.toFloat());
            Mb_90.MBHoldingRegister[9] = f_2uint_int2(XML_FORMUL2_KATSAYI_S.toFloat());
          }
        }

        dtostrf(XML_FORMUL1_KATSAYI_S.toFloat(), 6, 3, XML_FORMUL1_KATSAYI_C);
        dtostrf(XML_FORMUL2_KATSAYI_S.toFloat(), 6, 3, XML_FORMUL2_KATSAYI_C);
        u8g2.clearBuffer();
        u8g2.drawLine(128, 20, 0, 20);
        u8g2.drawLine(64, 64, 64, 20);
        u8g2.drawLine(128, 0, 0, 0);
        u8g2.drawLine(128, 63, 0, 63);
        u8g2.drawLine(0, 64, 0, 0);
        u8g2.drawLine(127, 127, 127, 0);

        u8g2.setFont(u8g2_font_ncenB14_tr);
        u8g2.drawStr(20, 18, XML_FORMUL1_C);  // write something to the internal memory
        u8g2.drawStr(110, 18, "%");
        u8g2.drawStr(1, 62, XML_FORMUL1_KATSAYI_C);   // write something to the internal memory
        u8g2.drawStr(65, 62, XML_FORMUL2_KATSAYI_C);  // write something to the internal memory
        u8g2.setFont(u8g2_font_t0_11_tf);
        u8g2.drawStr(1, 40, ExtraTaskSettings.TaskDeviceValueNames[1]);   // write something to the internal memory
        u8g2.drawStr(65, 40, ExtraTaskSettings.TaskDeviceValueNames[2]);  // write something to the internal memory
        u8g2.sendBuffer();

        formul1_float = f_2uint_float(Mb_90.MBHoldingRegister[6], Mb_90.MBHoldingRegister[7]);
        formul2_float = f_2uint_float(Mb_90.MBHoldingRegister[8], Mb_90.MBHoldingRegister[9]);

        success = true;
        break;
      }

    case PLUGIN_TEN_PER_SECOND:
      {
        unsigned int reg0 = f_2uint_int1(XML_NET_S.toFloat());
        unsigned int reg1 = f_2uint_int2(XML_NET_S.toFloat());
        unsigned int reg2 = f_2uint_int1(XML_FORMUL1_S.toFloat());
        unsigned int reg3 = f_2uint_int2(XML_FORMUL1_S.toFloat());
        unsigned int reg4 = f_2uint_int1(XML_FORMUL2_S.toFloat());
        unsigned int reg5 = f_2uint_int2(XML_FORMUL2_S.toFloat());
        Mb_90.MBHoldingRegister[0] = reg0;
        Mb_90.MBHoldingRegister[1] = reg1;
        Mb_90.MBHoldingRegister[2] = reg2;
        Mb_90.MBHoldingRegister[3] = reg3;
        Mb_90.MBHoldingRegister[4] = reg4;
        Mb_90.MBHoldingRegister[5] = reg5;
#ifdef SX1509_USE
        if (((io.digitalRead(SX1509_BUTTON_PIN4) == LOW) || (formul1_bool) || (formul2_bool)) && (button_bas_aktif)) {
#else
        if (((pcf8574.digitalRead(P4) == LOW) || (formul1_bool) || (formul2_bool)) && (button_bas_aktif)) {
#endif
          if ((Button_Aktif) || (formul1_bool) || (formul2_bool)) {
            u8g2.clearBuffer();
            u8g2.setFont(u8g2_font_ncenB08_tr);
            if (formul1_bool) {
              XML_FORMUL1_KATSAYI_S = String(f_2uint_float(Mb_90.MBHoldingRegister[6], Mb_90.MBHoldingRegister[7]), 3);
              dtostrf(XML_FORMUL1_KATSAYI_S.toFloat(), 6, 3, XML_FORMUL1_KATSAYI_C);
              strcpy_P(ExtraTaskSettings.TaskDeviceFormula[1], PSTR(XML_FORMUL1_KATSAYI_C));
              button_bas_aktif = false;
              formul1_bool = false;
              u8g2.drawStr(1, 20, "MODBUS FORMUL_1");
            } else if (formul2_bool) {
              XML_FORMUL2_KATSAYI_S = String(f_2uint_float(Mb_90.MBHoldingRegister[8], Mb_90.MBHoldingRegister[9]), 3);
              dtostrf(XML_FORMUL2_KATSAYI_S.toFloat(), 6, 3, XML_FORMUL2_KATSAYI_C);
              strcpy_P(ExtraTaskSettings.TaskDeviceFormula[2], PSTR(XML_FORMUL2_KATSAYI_C));
              button_bas_aktif = false;
              formul2_bool = false;
              u8g2.drawStr(1, 20, "MODBUS FORMUL_2");
            } else {
              Button_Aktif = false;
              u8g2.drawStr(1, 20, "BUTONLAR PASiF");  // write something to the internal memory
            }
            u8g2.drawStr(20, 40, "KAYDEDiLDi");  // write something to the internal memory
            u8g2.sendBuffer();
            Mb_90.MBHoldingRegister[6] = f_2uint_int1(XML_FORMUL1_KATSAYI_S.toFloat());
            Mb_90.MBHoldingRegister[7] = f_2uint_int2(XML_FORMUL1_KATSAYI_S.toFloat());
            Mb_90.MBHoldingRegister[8] = f_2uint_int1(XML_FORMUL2_KATSAYI_S.toFloat());
            Mb_90.MBHoldingRegister[9] = f_2uint_int2(XML_FORMUL2_KATSAYI_S.toFloat());
            formul1_float = f_2uint_float(Mb_90.MBHoldingRegister[6], Mb_90.MBHoldingRegister[7]);
            formul2_float = f_2uint_float(Mb_90.MBHoldingRegister[8], Mb_90.MBHoldingRegister[9]);
            SaveTaskSettings(event->TaskIndex);
          } else {
            Button_Aktif = true;
            u8g2.clearBuffer();
            u8g2.setFont(u8g2_font_ncenB08_tr);
            u8g2.drawStr(1, 20, "BUTONLAR AKTiF");  // write something to the internal memory
            u8g2.sendBuffer();
          }
          pcf8574.digitalWrite(P5, HIGH);
          delay(1000);
          pcf8574.digitalWrite(P5, LOW);
          button_basildi = millis() + 1000;
          button_bas_aktif = false;
        }
        if ((Button_Aktif) && (button_bas_aktif)) {
#ifdef SX1509_USE
          if (io.digitalRead(SX1509_BUTTON_PIN0) == LOW) {
#else
          if (pcf8574.digitalRead(P0) == LOW) {
#endif
            u8g2.clearBuffer();
            formul1_katsayi = String(XML_FORMUL1_KATSAYI_S.toFloat() * 1000, 3).toInt();
            if (formul1_katsayi < 5000) {
              hizli_buton++;
              if (hizli_buton < 10)
                formul1_katsayi = formul1_katsayi + 1;
              if ((hizli_buton > 10) && (hizli_buton < 20))
                formul1_katsayi = formul1_katsayi + 10;
              if (hizli_buton > 20)
                formul1_katsayi = formul1_katsayi + 100;
              XML_FORMUL1_KATSAYI_S = String((formul1_katsayi / 1000), 3);
              dtostrf(XML_FORMUL1_KATSAYI_S.toFloat(), 6, 3, XML_FORMUL1_KATSAYI_C);
              strcpy_P(ExtraTaskSettings.TaskDeviceFormula[1], PSTR(XML_FORMUL1_KATSAYI_C));
              button_basildi = millis() + 200;
              button_bas_aktif = false;
              pcf8574.digitalWrite(P5, HIGH);
            }
          }
#ifdef SX1509_USE
          else if (io.digitalRead(SX1509_BUTTON_PIN1) == LOW) {
#else
          else if (pcf8574.digitalRead(P1) == LOW) {
#endif
            u8g2.clearBuffer();
            formul1_katsayi = String(XML_FORMUL1_KATSAYI_S.toFloat() * 1000, 3).toInt();
            if (formul1_katsayi > 0) {
              hizli_buton++;
              if (hizli_buton < 10)
                formul1_katsayi = formul1_katsayi - 1;
              if ((hizli_buton > 10) && (hizli_buton < 20))
                formul1_katsayi = formul1_katsayi - 10;
              if (hizli_buton > 20)
                formul1_katsayi = formul1_katsayi - 100;
              XML_FORMUL1_KATSAYI_S = String((formul1_katsayi / 1000), 3);
              dtostrf(XML_FORMUL1_KATSAYI_S.toFloat(), 6, 3, XML_FORMUL1_KATSAYI_C);
              strcpy_P(ExtraTaskSettings.TaskDeviceFormula[1], PSTR(XML_FORMUL1_KATSAYI_C));
              button_basildi = millis() + 200;
              button_bas_aktif = false;
              pcf8574.digitalWrite(P5, HIGH);
            }
          }
#ifdef SX1509_USE
          else if (io.digitalRead(SX1509_BUTTON_PIN2) == LOW) {
#else
          else if (pcf8574.digitalRead(P2) == LOW) {
#endif
            u8g2.clearBuffer();
            formul2_katsayi = String(XML_FORMUL2_KATSAYI_S.toFloat() * 1000, 3).toInt();
            if (formul2_katsayi < 5000) {
              hizli_buton++;
              if (hizli_buton < 10)
                formul2_katsayi = formul2_katsayi + 1;
              if ((hizli_buton > 10) && (hizli_buton < 20))
                formul2_katsayi = formul2_katsayi + 10;
              if (hizli_buton > 20)
                formul2_katsayi = formul2_katsayi + 100;
              XML_FORMUL2_KATSAYI_S = String((formul2_katsayi / 1000), 3);
              dtostrf(XML_FORMUL2_KATSAYI_S.toFloat(), 6, 3, XML_FORMUL2_KATSAYI_C);
              strcpy_P(ExtraTaskSettings.TaskDeviceFormula[2], PSTR(XML_FORMUL2_KATSAYI_C));
              button_basildi = millis() + 200;
              button_bas_aktif = false;
              pcf8574.digitalWrite(P5, HIGH);
            }
          }
#ifdef SX1509_USE
          else if (io.digitalRead(SX1509_BUTTON_PIN3) == LOW) {
#else
          else if (pcf8574.digitalRead(P3) == LOW) {
#endif
            u8g2.clearBuffer();
            formul2_katsayi = String(XML_FORMUL2_KATSAYI_S.toFloat() * 1000, 3).toInt();
            if (formul2_katsayi > 0) {
              hizli_buton++;
              if (hizli_buton < 10)
                formul2_katsayi = formul2_katsayi - 1;
              if ((hizli_buton > 10) && (hizli_buton < 20))
                formul2_katsayi = formul2_katsayi - 10;
              if (hizli_buton > 20)
                formul2_katsayi = formul2_katsayi - 100;
              XML_FORMUL2_KATSAYI_S = String((formul2_katsayi / 1000), 3);
              dtostrf(XML_FORMUL2_KATSAYI_S.toFloat(), 6, 3, XML_FORMUL2_KATSAYI_C);
              strcpy_P(ExtraTaskSettings.TaskDeviceFormula[2], PSTR(XML_FORMUL2_KATSAYI_C));
              button_basildi = millis() + 200;
              button_bas_aktif = false;
              pcf8574.digitalWrite(P5, HIGH);
            }
          } else if (button_bas_aktif) {
            hizli_buton = 0;
          }
        }
        if (button_basildi < millis()) {
          button_bas_aktif = true;
          pcf8574.digitalWrite(P5, LOW);
        }
        success = true;
        break;
      }
#if FEATURE_ETHERNET
    case PLUGIN_SERIAL_IN:
      {
        while (Serial1.available()) {
          char inChar = Serial1.read();
          if (inChar == 255)  // binary data...
          {
            Serial1.flush();
            break;
          }
          tartimString_s += (String)inChar;
          if (inChar == ExtraTaskSettings.TaskDeviceSonByte) {
            hataTimer_l = millis();

            isaret(event, PANO_Indikator, tartimString_s);
            webapinettartim = isaret_f * (tartimString_s.substring(ExtraTaskSettings.TaskDeviceValueBas[0], ExtraTaskSettings.TaskDeviceValueBit[0]).toFloat());
            UserVar[event->BaseVarIndex] = webapinettartim;
            webapikatsayi1 = String(ExtraTaskSettings.TaskDeviceFormula[1]).toFloat();
            webapikatsayi2 = String(ExtraTaskSettings.TaskDeviceFormula[2]).toFloat();
            XML_NET_S = String((webapinettartim), ExtraTaskSettings.TaskDeviceValueDecimals[0]);
            XML_FORMUL1_S = String((((webapikatsayi2 * (webapikatsayi1 - (webapinettartim / 1000))) / ((webapinettartim / 1000) * (webapikatsayi1 - webapikatsayi2))) * 100), 2);
            dtostrf(XML_NET_S.toFloat(), (ExtraTaskSettings.TaskDeviceValueBit[0] - ExtraTaskSettings.TaskDeviceValueBas[0]), ExtraTaskSettings.TaskDeviceValueDecimals[0], XML_NET_C);
            dtostrf(XML_FORMUL1_S.toFloat(), 8, 2, XML_FORMUL1_C);
            tartimString_s = "";
            Serial1.flush();
          }
        }
        success = true;
        break;
      }
#else
    case PLUGIN_SERIAL_IN:
      {
        while (Serial.available()) {
          char inChar = Serial.read();
          if (inChar == 255)  // binary data...
          {
            Serial.flush();
            break;
          }
          tartimString_s += (String)inChar;
          if (inChar == ExtraTaskSettings.TaskDeviceSonByte) {
            hataTimer_l = millis();

            isaret(event, PANO_Indikator, tartimString_s);
            webapinettartim = isaret_f * (tartimString_s.substring(ExtraTaskSettings.TaskDeviceValueBas[0], ExtraTaskSettings.TaskDeviceValueBit[0]).toFloat());
            UserVar[event->BaseVarIndex] = webapinettartim;
            webapikatsayi1 = String(ExtraTaskSettings.TaskDeviceFormula[1]).toFloat();
            webapikatsayi2 = String(ExtraTaskSettings.TaskDeviceFormula[2]).toFloat();
            XML_NET_S = String((webapinettartim), int(ExtraTaskSettings.TaskDeviceValueDecimals[0]));
            XML_FORMUL1_S = String((((webapikatsayi2 * (webapikatsayi1 - (webapinettartim / 1000))) / ((webapinettartim / 1000) * (webapikatsayi1 - webapikatsayi2))) * 100), 2);
            dtostrf(XML_NET_S.toFloat(), (ExtraTaskSettings.TaskDeviceValueBit[0] - ExtraTaskSettings.TaskDeviceValueBas[0]), ExtraTaskSettings.TaskDeviceValueDecimals[0], XML_NET_C);
            dtostrf(XML_FORMUL1_S.toFloat(), 8, 2, XML_FORMUL1_C);
            tartimString_s = "";
            Serial.flush();
          }
        }
        success = true;
        break;
      }
#endif
  }
  return success;
}
#endif
